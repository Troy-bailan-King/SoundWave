import { SignInButton, useUser,UserButton } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import type { RouterOutputs } from "~/utils/api";
import { LoadingPage } from "~/components/loading";
import { useState } from "react";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const {mutate} = api.posts.create.useMutation();
  const user = useUser();

  const [input, setInput] = useState("");
  
  if(!user.isSignedIn) return null;
  return (

    <div className="flex w-full gap-3">
      <UserButton appearance={{
        elements: {
          userButtonAvatarBox: {
            width: 56,
            height: 56
          }
        }
      }} />
      <input
        placeholder="Type some emojis!"
        className="grow bg-transparent outline-none"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      
      <button onClick={() => mutate({ content: input })}>Post</button>
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number]

const PostView = (props: PostWithUser) => {
  const {post, author} = props;
  return(
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4">
      <img src={author.profileImageUrl} className="h-14 w-14 rounded-full"/>
            <div className="flex flex-col">
              <div className="flex gap-1 text-slate-300">
                <span>{`@${author.username} `}</span>
                <span className="font-thin">{`Â·${dayjs(post.createdAt).fromNow()}`}</span> 
              </div>
              <span className="text-2xl">{post.content}</span>
            </div>
            
          </div>
  );
};


const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading)
    return (
      <div className="flex grow">
        <LoadingPage />
      </div>
    );

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex grow flex-col overflow-y-scroll">
      {[...data].map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};


const Home: NextPage = () => {
  const {isLoaded:userLoaded, isSignedIn} = useUser();
  
  // Start fetching asap
  api.posts.getAll.useQuery();

  if(!userLoaded) return <div />

  return (
    <>
      <Head>
        <title>SoundExchange</title>
        <meta name="description" content="Generated by SoundWave" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full md:max-w-2xl border-slate-400 border-x ">
        <div className="border-b border-slate-400 p-4">
          {!isSignedIn&&<div className="flex justify-center"><SignInButton /></div>}
          {!!isSignedIn&&<CreatePostWizard />}
        </div>
        <Feed />
        </div>
      </main>
    </> 
  );
};

export default Home;
